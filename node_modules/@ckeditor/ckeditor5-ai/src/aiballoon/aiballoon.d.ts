/**
 * @license Copyright (c) 2003-2025, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-licensing-options
 */
import { ContextPlugin } from 'ckeditor5/src/core.js';
import { AIConnector } from '../aicore/aiconnector.js';
import { type View } from 'ckeditor5/src/ui.js';
import { AIEditing } from '../aicore/aiediting.js';
import { AIBalloonView } from './ui/aiballoonview.js';
import '../../theme/aiballoon/aiballoon.css';
import { type ModelRange } from 'ckeditor5/src/engine.js';
/**
 * Event names that can be fired by the AI Balloon plugin.
 * Includes all view events plus dialog-specific events.
 */
export declare const AI_BALLOON_EVENT_NAMES: readonly ["applySuggestion", "insertSuggestion", "showNext", "showPrevious", "dialogClosed"];
/**
 * Configuration object for opening the AI Balloon.
 */
export interface AIBalloonConfig {
    index: number;
    title: string;
    icon?: string;
    mainView: View;
    ranges: Array<ModelRange>;
    showRotator: boolean;
    showApplyButton: boolean;
    showSuggestButton: boolean;
}
/**
 * The AI Balloon plugin provides a balloon dialog interface for displaying and interacting with AI suggestions.
 */
export declare class AIBalloon extends ContextPlugin {
    /**
     * @inheritDoc
     */
    static get requires(): readonly [typeof AIConnector, typeof AIEditing];
    /**
     * @inheritDoc
     */
    static get pluginName(): "AIBalloon";
    /**
     * @inheritDoc
     */
    static get isOfficialPlugin(): true;
    /**
     * @inheritDoc
     */
    static get isPremiumPlugin(): true;
    /**
     * A flag indicating whether the AI Balloon dialog is currently open.
     */
    isOpen: boolean;
    /**
     * The current balloon view instance.
     */
    balloonView: AIBalloonView;
    /**
     * Opens the AI Balloon dialog with the provided configuration.
     *
     * @param config Configuration object containing dialog settings and content data
     */
    open(config: AIBalloonConfig): void;
    /**
     * Closes the currently open AI Balloon dialog.
     */
    close(): void;
}
export type AIBalloonDialogClosedEvent = {
    name: 'dialogClosed';
    args: [];
};
